//УчПлан = Документы.УчебныйПланДФО.НайтиПоНомеру("0000000000583");
//Проект = Документы.ПроектыУП.НайтиПоНомеру("000000019");
&НаКлиенте
Процедура ВыполнитьПеренос(Команда)
	ПеренестиВсеПланыДФО();
КонецПроцедуры

&НаКлиенте
Процедура ВыпонитьПереносОдного(Команда)
	Если УчПлан.Пустая() Тогда
		Сообщить("Выберите план!");
		Возврат;
	КонецЕсли;
	ВыпонитьПереносОдногоНаСервере(УчПлан);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыпонитьПереносОдногоНаСервере(План)
	Если План.Ссылка.ГодНабора.ГодНабораЧисло <> 2022 Тогда
		Сообщить("Выбран не 2022 год набора");
		Возврат;
	КонецЕсли;
	Попытка
		ВыполнитьПереносДляПлана(План.Ссылка);
	Исключение
		Сообщить("Исключительная ситуация. План не был создан");
	КонецПопытки;
	Сообщить("Готово");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВсеПланыДФО()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчебныйПланДФО.Ссылка
	               |ИЗ
	               |	Документ.УчебныйПланДФО КАК УчебныйПланДФО
	               |ГДЕ
	               |	УчебныйПланДФО.ГодНабора.ГодНабораЧисло = 2022";
	СсылкиПланов = Запрос.Выполнить().Выгрузить();
	
	Успех = 0;
	Ошибки = 0;
	Для Каждого План Из СсылкиПланов Цикл
		Попытка
			ВыполнитьПереносДляПлана(План.Ссылка);
			Успех = Успех + 1;
		Исключение
			Сообщить(План.Ссылка);
			Ошибки = Ошибки + 1;
		КонецПопытки;
	КонецЦикла;
	Сообщить("Готово. Успешно = " + Успех + ". Ошибки = " + Ошибки);
КонецПроцедуры

&НаСервереБезКонтекста
// Создаёт новый проект плана из учебного плана
Процедура ВыполнитьПереносДляПлана(УчПлан)
	ДФО = Документы.ПроектыУП.СоздатьДокумент();
	
	// Шапка
	ДФО.ФормаОбучения = Перечисления.ФормаОбучения.ДневнаяФО;
	ДФО.РегистрационныйНомерПлана = УчПлан.УчетныйНомерПлана;
	
	// Путь к номеру: Контингент -> Учетные номера проектов -> ДФО
	РодПроекты = Справочники.Контингент.НайтиПоНаименованию("Учетные номера проектов", Истина);
	Если РодПроекты.Пустая() Тогда
		РодПроекты = Справочники.Контингент.СоздатьГруппу();
		РодПроекты.Наименование = "Учетные номера проектов";
		РодПроекты.Записать();
	КонецЕсли;
	
	Родитель = Справочники.Контингент.НайтиПоНаименованию("ДФО", Истина, РодПроекты.Ссылка);
	Если Родитель.Пустая() Тогда
		Родитель = Справочники.Контингент.СоздатьГруппу();
		Родитель.Наименование = "ДФО";
		Родитель.Родитель = РодПроекты.Ссылка;
		Родитель.Записать();
	КонецЕсли;	
	
	РегНомер = Справочники.Контингент.НайтиПоНаименованию(УчПлан.КодСпециальности.Наименование + "уч", Истина, Родитель.Ссылка);
	Если РегНомер.Пустая() Тогда
		РегНомер = Справочники.Контингент.СоздатьЭлемент();
		РегНомер.Наименование = УчПлан.КодСпециальности.Наименование + "уч";
		РегНомер.Родитель = Родитель.Ссылка;
		РегНомер.Записать();
	КонецЕсли;
	
	ДФО.РегистрационныйНомерПроекта = РегНомер.Ссылка;
	ДФО.КодСпециальности = УчПлан.КодСпециальности;
	ДФО.Специальность = УчПлан.Специальность;
	ДФО.КодСпециализации = УчПлан.КодСпециализации;
	ДФО.НазваниеСпециализации = УчПлан.Специализация;
	ДФО.КодНаправленияСпециальности = УчПлан.КодНаправления;
	ДФО.НазваниеНаправленияСпециальности = УчПлан.Направление;
	ДФО.НазваниеСпециальности = УчПлан.НазваниеСпециальности;
	ДФО.Квалификация = УчПлан.Квалификация;
	ДФО.Степень = Перечисления.Степень.бакалавр;
	ДФО.Факультет = УчПлан.Факультет;
	ДФО.ВыпускающаяКафедра = УчПлан.Специальность.ВыпКафедра;
	ДФО.ГодНабора = УчПлан.ГодНабора;
	ДФО.ГодВыпуска = УчПлан.ГодВыпуска;
	ДФО.СрокОбучения = УчПлан.СрокОбучения;
	ДФО.СтупеньОбразования = "первая";
	ДФО.ДолжностьРуководителя = "Ректор учреждения образования «Белорусский государственный университет информатики и радиоэлектроники»";
	ДФО.ФИОРуководителя = Справочники.Сотрудники.НайтиПоНаименованию("Богуш Вадим Анатольевич", Истина);
	ДФО.ПримечаниеПоПлану = УчПлан.Примечание;
	ДФО.РекомендацииКУтверждению = "Рекомендован к утверждению Советом учреждения образования «Белорусский государственный университет информатики и радиоэлектроники», протокол №";
		
	// Основная ТЧ
	ДисцПоВыбору = УчПлан.ТЧ.ВыгрузитьКолонки();
	Для Каждого СТЗ Из УчПлан.ТЧ Цикл
		Если СТЗ.Дисциплина.Родитель.Наименование = "Дисциплины" Тогда
			// Дисциплины по выбору мы обрабатываем отдельно
			Если СТЗ.Примечание = "выбор" Или СТЗ.Примечание = "не выбор" Тогда
				ЗаполнитьЗначенияСвойств(ДисцПоВыбору.Добавить(), СТЗ);
				Продолжить;
			КонецЕсли;
			Дисц = ДФО.Дисциплины.Добавить();
			Дисц.Дисциплина = СТЗ.Дисциплина;		
			Дисц.ВыбираемыеКафедры = СТЗ.Кафедра.Наименование;
			Дисц.ВыбираемыеДисциплины = СТЗ.Дисциплина.Наименование;
			Дисц.ЧислоНедель = СТЗ.ЧислоНедель;
			Дисц.Лекции = СТЗ.Лекции;
			Дисц.Лабораторные = СТЗ.ЛБ;
			Дисц.Практические = СТЗ.ПЗ;
			Дисц.Семестр = Справочники.Семестры.НайтиПоНаименованию(СТЗ.Сем);
			Дисц.СеместрыСтрока = СТЗ.Сем;
			Дисц.Компонента = ?(СТЗ.ГосКомпонент > 0, Справочники.Компоненты.НайтиПоРеквизиту("ПорядковыйНомер", СТЗ.ГосКомпонент), Неопределено);
			Дисц.Кафедра = СТЗ.Кафедра;
			Дисц.КурсовоеПроектирование = СТЗ.КурсПроект;
			Дисц.КурсоваяРабота = СТЗ.КурсРаб;
			Дисц.ТиповойРасчет = СТЗ.ТипР;
			Дисц.Зачет = СТЗ.Зачет;
			Дисц.Экзамен = СТЗ.Экз;
			Дисц.ВсегоЧасов = СТЗ.ВсегоЧасов;
			Дисц.Всего = СТЗ.ВсегоЧасов;
			Дисц.АудиторныхЧасов = СТЗ.Всего;
			Дисц.Аудиторных = СТЗ.Всего;
			Дисц.ЗачетныхЕдиниц = СТЗ.ЗачЕдиницы;
			Дисц.ВсегоЗачетныхЕдиниц = СТЗ.ЗачЕдиницы;
			Дисц.Примечание = СТЗ.Примечание;
			// Это практика. ВН просил не заполнять их.
		//ИначеЕсли СТЗ.Дисциплина.Родитель.Наименование = "Практики" И СТЗ.Дисциплина.ГруппаИспользования = "СекторПрактик" Тогда
			//Практика = ДФО.ПрактикиДПГЭК.Добавить();
			//Если СтрНайти(СТЗ.Дисциплина.Наименование, "Учебн") <> 0 Тогда
			//	Практика.Разделы = "IV. Учебные практики";		
			//ИначеЕсли СтрНайти(СТЗ.Дисциплина.Наименование, "Производств") <> 0 Тогда
			//	Практика.Разделы = "V. Производственные практики";
			//КонецЕсли;
			//
			//Практика.Дисциплины = Справочники.ВидыУчебнойДеятельности.НайтиПоНаименованию(СТЗ.Дисциплина.Наименование);
			//Практика.ЗачетныеЕдиницы = СТЗ.ЗачЕдиницы;
			//Практика.Кафедра = СТЗ.Кафедра;
			//Практика.Примечание = СТЗ.Примечание;
			//Практика.Семестр = Справочники.Семестры.НайтиПоНаименованию(СТЗ.Сем);
			//Практика.ЧислоНедель = СТЗ.ЧислоНедель;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка дисциплин по выбору
	ДисцПоВыбору = СвернутьДисциплиныПоВыбору(ДисцПоВыбору);
	СТЗ = Неопределено;
	Для Каждого ДПВ Из ДисцПоВыбору Цикл
		Дисц = ДФО.Дисциплины.Добавить();
		Дисц.ВыбираемыеДисциплины = ДПВ.ВыбДисц;
		Дисц.ВыбираемыеКафедры = ДПВ.ВыбКаф;
		Дисц.ВыборДисциплины = Истина;
		Дисц.ЧислоНедель = ДПВ.ЧислоНедель;
		Дисц.Лекции = ДПВ.Лекции;
		Дисц.Лабораторные = ДПВ.ЛБ;
		Дисц.Практические = ДПВ.ПЗ;
		Дисц.Семестр = Справочники.Семестры.НайтиПоНаименованию(ДПВ.Сем);
		Дисц.СеместрыСтрока = ДПВ.Сем;
		Дисц.Компонента = ?(ДПВ.ГосКомпонент > 0, Справочники.Компоненты.НайтиПоРеквизиту("ПорядковыйНомер", ДПВ.ГосКомпонент), Неопределено);
		Дисц.КурсовоеПроектирование = ДПВ.КурсПроект;
		Дисц.КурсоваяРабота = ДПВ.КурсРаб;
		Дисц.ТиповойРасчет = ДПВ.ТипР;
		Дисц.Зачет = ДПВ.Зачет;
		Дисц.Экзамен = ДПВ.Экз;
		Дисц.ВсегоЧасов = ДПВ.ВсегоЧасов;
		Дисц.Всего = ДПВ.ВсегоЧасов;
		Дисц.АудиторныхЧасов = ДПВ.Всего;
		Дисц.Аудиторных = ДПВ.Всего;
		Дисц.ЗачетныхЕдиниц = ДПВ.ЗачЕдиницы;
		Дисц.ВсегоЗачетныхЕдиниц = ДПВ.ЗачЕдиницы;
	КонецЦикла;
	
	// График
	//ДФО.ГрафикОбразовательногоПроцесса.Загрузить(ПолучитьГрафикИзУчПлана(УчПлан.Ссылка));
	
	ДФО.Дата = ТекущаяДата();
	ДФО.УстановитьНовыйНомер();
	ДФО.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервереБезКонтекста
// Сворачивает одинаковые дисциплины по выбору в одну (через "/" в колонке результата). Добавляет 2 колонки с результатом ("ВыбДисц", "ВыбКаф")
// Сворачиваются те дисциплины, в которых ВСЁ совпадает, кроме названия дисциплины или кафедры. 
Функция СвернутьДисциплиныПоВыбору(ДисцПоВыбору)
	ДисцПоВыбору.Колонки.Добавить("ВыбДисц");
	ДисцПоВыбору.Колонки.Добавить("ВыбКаф");
	// Цикл Для..По не подходит для удаления. Он просто неадекватно воспринемает условие выхода ТЗ.Количество() при удалении из ТЗ.
	
	Инд = 0; // ДисцПоВыбору.Количество() - 1
	Пока Инд < ДисцПоВыбору.Количество() Цикл
		ДисцПоВыбору[Инд].ВыбДисц = СжПроб(ДисцПоВыбору[Инд].Дисциплина.Наименование);
		ДисцПоВыбору[Инд].ВыбКаф = СжПроб(ДисцПоВыбору[Инд].Кафедра.Наименование);
		// Проходим все оставшиеся дисциплины и ищем полностью одинаковые строки (кроме Кафедры и Дисциплины)
		След = Инд + 1;
		Пока След < ДисцПоВыбору.Количество() Цикл 
			Если ДисцПоВыбору[Инд].ГосКомпонент = ДисцПоВыбору[След].ГосКомпонент И
				ДисцПоВыбору[Инд].ГосКомпонент = ДисцПоВыбору[След].ГосКомпонент И
				ДисцПоВыбору[Инд].ЧислоНедель = ДисцПоВыбору[След].ЧислоНедель И
			    ДисцПоВыбору[Инд].КурсПроект = ДисцПоВыбору[След].КурсПроект И				
				ДисцПоВыбору[Инд].ВсегоЧасов = ДисцПоВыбору[След].ВсегоЧасов И
				ДисцПоВыбору[Инд].ЗачЕдиницы = ДисцПоВыбору[След].ЗачЕдиницы И
				ДисцПоВыбору[Инд].Примечание = ДисцПоВыбору[След].Примечание И
				ДисцПоВыбору[Инд].КурсРаб = ДисцПоВыбору[След].КурсРаб И
				ДисцПоВыбору[Инд].Лекции = ДисцПоВыбору[След].Лекции И
				ДисцПоВыбору[Инд].Всего = ДисцПоВыбору[След].Всего И
				ДисцПоВыбору[Инд].Зачет = ДисцПоВыбору[След].Зачет И
				ДисцПоВыбору[Инд].ТипР = ДисцПоВыбору[След].ТипР И
				ДисцПоВыбору[Инд].Сем = ДисцПоВыбору[След].Сем И
				ДисцПоВыбору[Инд].Экз = ДисцПоВыбору[След].Экз И
				ДисцПоВыбору[Инд].ЛБ = ДисцПоВыбору[След].ЛБ И
				ДисцПоВыбору[Инд].ПЗ = ДисцПоВыбору[След].ПЗ Тогда
				// Сращиваем дисциплины и кафедры
				ДисцПоВыбору[Инд].ВыбДисц = ДисцПоВыбору[Инд].ВыбДисц + "/" + СжПроб(ДисцПоВыбору[След].Дисциплина.Наименование);
				ДисцПоВыбору[Инд].ВыбКаф = ДисцПоВыбору[Инд].ВыбКаф + "/" + СжПроб(ДисцПоВыбору[След].Кафедра.Наименование);
				ДисцПоВыбору.Удалить(След);
				Продолжить;
			КонецЕсли;
			След = След + 1;
		КонецЦикла;
		Инд = Инд + 1;
	КонецЦикла;
	Возврат ДисцПоВыбору;
КонецФункции

&НаСервереБезКонтекста
// Удаляет лишние пробелы
Функция СжПроб(Стр) Экспорт
	Пока Найти(Стр, "  ") > 0 Цикл
		Стр = СтрЗаменить(Стр, "  ", " ");
	КонецЦикла;
	Возврат СокрЛП(Стр);
КонецФункции

&НаСервереБезКонтекста
// Перевод строки "Курс" в ссылку на справочник.
// Может все графики перевести, а потом делать отбор?
Функция ПолучитьГрафикИзУчПлана(УчПланСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Курсы.Ссылка КАК Курс,
	               |	УчебныйПланДФОГрафик.Неделя1,
	               |	УчебныйПланДФОГрафик.Неделя2,
	               |	УчебныйПланДФОГрафик.Неделя3,
	               |	УчебныйПланДФОГрафик.Неделя4,
	               |	УчебныйПланДФОГрафик.Неделя5,
	               |	УчебныйПланДФОГрафик.Неделя6,
	               |	УчебныйПланДФОГрафик.Неделя7,
	               |	УчебныйПланДФОГрафик.Неделя8,
	               |	УчебныйПланДФОГрафик.Неделя9,
	               |	УчебныйПланДФОГрафик.Неделя10,
	               |	УчебныйПланДФОГрафик.Неделя11,
	               |	УчебныйПланДФОГрафик.Неделя12,
	               |	УчебныйПланДФОГрафик.Неделя13,
	               |	УчебныйПланДФОГрафик.Неделя14,
	               |	УчебныйПланДФОГрафик.Неделя15,
	               |	УчебныйПланДФОГрафик.Неделя16,
	               |	УчебныйПланДФОГрафик.Неделя17,
	               |	УчебныйПланДФОГрафик.Неделя18,
	               |	УчебныйПланДФОГрафик.Неделя19,
	               |	УчебныйПланДФОГрафик.Неделя20,
	               |	УчебныйПланДФОГрафик.Неделя21,
	               |	УчебныйПланДФОГрафик.Неделя22,
	               |	УчебныйПланДФОГрафик.Неделя23,
	               |	УчебныйПланДФОГрафик.Неделя24,
	               |	УчебныйПланДФОГрафик.Неделя25,
	               |	УчебныйПланДФОГрафик.Неделя26,
	               |	УчебныйПланДФОГрафик.Неделя27,
	               |	УчебныйПланДФОГрафик.Неделя28,
	               |	УчебныйПланДФОГрафик.Неделя29,
	               |	УчебныйПланДФОГрафик.Неделя30,
	               |	УчебныйПланДФОГрафик.Неделя31,
	               |	УчебныйПланДФОГрафик.Неделя32,
	               |	УчебныйПланДФОГрафик.Неделя33,
	               |	УчебныйПланДФОГрафик.Неделя34,
	               |	УчебныйПланДФОГрафик.Неделя35,
	               |	УчебныйПланДФОГрафик.Неделя36,
	               |	УчебныйПланДФОГрафик.Неделя37,
	               |	УчебныйПланДФОГрафик.Неделя38,
	               |	УчебныйПланДФОГрафик.Неделя39,
	               |	УчебныйПланДФОГрафик.Неделя40,
	               |	УчебныйПланДФОГрафик.Неделя41,
	               |	УчебныйПланДФОГрафик.Неделя42,
	               |	УчебныйПланДФОГрафик.Неделя43,
	               |	УчебныйПланДФОГрафик.Неделя44,
	               |	УчебныйПланДФОГрафик.Неделя45,
	               |	УчебныйПланДФОГрафик.Неделя46,
	               |	УчебныйПланДФОГрафик.Неделя47,
	               |	УчебныйПланДФОГрафик.Неделя48,
	               |	УчебныйПланДФОГрафик.Неделя49,
	               |	УчебныйПланДФОГрафик.Неделя50,
	               |	УчебныйПланДФОГрафик.Неделя51,
	               |	УчебныйПланДФОГрафик.Неделя52
	               |ИЗ
	               |	Документ.УчебныйПланДФО.График КАК УчебныйПланДФОГрафик
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Курсы КАК Курсы
	               |		ПО УчебныйПланДФОГрафик.Курс = Курсы.Наименование
	               |ГДЕ
	               |	УчебныйПланДФОГрафик.Ссылка = &УчПлан";
	Запрос.УстановитьПараметр("УчПлан", УчПланСсылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаКлиенте
Процедура ОткрытьПланы(Команда)
	Форма = ОткрытьФорму("Документ.УчебныйПланДФО.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроекты(Команда)
	Форма = ОткрытьФорму("Документ.ПроектыУП.Форма.ФормаСписка");
КонецПроцедуры
